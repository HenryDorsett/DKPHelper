using DKPHelper.Commands;

namespace DKPHelper
{
    internal class Program
    {
        static void Main(string[] args)
        {
            bool genText = false, genJson = false;
            string fileSql = "C:/Temp/quarm_2025-09-30-21_22.sql", dirTicks = "C:/Temp/", dirLog = "C:/Temp/", fileText = "testout.txt", fileJson = "testout.json";
            string raidname = "Raid", charname = "Kamoxicillin", date = "Oct-21-2025";

            Command.NewRaid();

            //args = new string[] { "-n=Testraid!", "-pt=C:/temp", "-pl=C:/temp,Kamoxicillin,Oct-21-2025", "-gt=testout.txt" };

            if (args[0].Contains("--help") || args[0].Contains("-h"))
            {
                // Print help.
                Console.WriteLine(" ::: DKPHelper :::" +
                    "\r\n\tGet your DKP sorted, faster." +
                    "\r\n" +
                    "\r\nUsage:" +
                    "\r\n\t--rebuild-itemlist-xml=<sql file>:" +
                    "\r\n\t\tRebuilds the item database from the specified Quarm database SQL file." +
                    "\r\n\t\t\tDefault: C:/Temp/quarm_2025-09-30-21_22.sql" +
                    "\r\n\t--name=<name> | -n=<name>:" +
                    "\r\n\t\tSpecifies the name of the raid." +
                    "\r\n\t\t\tDefault: Raid" +
                    "\r\n\t--parse-ticks=<directory> | -pt=<directory>:" +
                    "\r\n\t\tParse all raid ticks in the specified directory, as generated by Zeal." +
                    "\r\n\t\t\tDefault: C:/Temp/" +
                    "\r\n\t--parse-log=<directory,character,date> | -pl=<directory,character,date>:" +
                    "\r\n\t\tParses all EQ log files in the specified directory, for the specified" +
                    "\r\n\t\tcharacter, on the specified date.  Date must be formated as in the EQ" +
                    "\r\n\t\tlog file, with dashes replacing spaces." +
                    "\r\n\t\t\tDefault: C:/Temp/,Kamoxicillin,Oct-21-2025" +
                    "\r\n\t--generate-text=<output file> | -gt=<output file>:" +
                    "\r\n\t\tOutputs the parsed data into the specified text file." +
                    "\r\n\t--generate-json=<output file> | -gj=<output file>:" +
                    "\r\n\t\tOutputs the parsed data into the specified JSON file." +
                    "\r\n" +
                    "\r\n" +
                    "\r\nTODO: Implement uploading to OpenDKP.  Sorry, still gotta do it manually."
                    );

                return;
            }

            foreach (string arg in args)
            {
                if (arg.Contains("--rebuild-itemlist-xml"))
                {
                    if (arg.Contains('='))
                        fileSql = arg.Split('=')[1];
                    Command.XMLBuilder(@fileSql);
                }

                if (arg.Contains("--name") || arg.Contains("-n"))
                {
                    if (arg.Contains('='))
                        raidname = arg.Split('=')[1];
                    Command.SetRaidName(raidname);
                }

                if (arg.Contains("--parse-ticks") || arg.Contains("-pt"))
                {
                    if (arg.Contains('='))
                        dirTicks = arg.Split('=')[1];
                    Command.ParseTicks(dirTicks);
                }
                if (arg.Contains("--parse-log") || arg.Contains("-pl"))
                {
                    if (arg.Contains('='))
                    {
                        try
                        {
                            dirLog = arg.Split('=')[1].Split(',')[0].Trim();
                            charname = arg.Split('=')[1].Split(',')[1].Trim();
                            date = arg.Split('=')[1].Split(',')[2].Trim();
                            Command.ParseLog(dirLog, charname, date);
                        }
                        catch
                        {
                            Console.WriteLine("Malformed --parse-log command.  Please try again.\r\n");
                        }
                    }
                }

                if (arg.Contains("--generate-text") || arg.Contains("-gt"))
                {
                    if (arg.Contains('='))
                    {
                        fileText = arg.Split('=')[1];
                        genText = true;
                    }
                }
                if (arg.Contains("--generate-json") || arg.Contains("-gj"))
                {
                    if (arg.Contains('='))
                    {
                        fileJson = arg.Split('=')[1];
                        genJson = true;
                    }
                }
            }

            if (genText)
            {
                FileStream fs = File.Open(@"testout.txt", FileMode.Create);
                StreamWriter sw = new StreamWriter(fs);
                sw.Write(Command.GetRaidText());
                sw.Close();
                fs.Close();
            }

            if (genJson)
            {
                FileStream fs = File.Open(@"testout.txt", FileMode.Create);
                StreamWriter sw = new StreamWriter(fs);
                sw.Write(Command.GetRaidJSON());
                sw.Close();
                fs.Close();
            }
        }
    }
}
